# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker compose reference guide at
# https://docs.docker.com/go/compose-spec-reference/

# Here the instructions define your application as a service called "server".
# This service is built from the Dockerfile in the current directory.
# You can add other services your application may depend on here, such as a
# database or a cache. For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose
services:
  platonapp:
    build:
      context: .
      target: dev
    env_file: ./.env
    restart: unless-stopped
    environment:
      - MYSQL_HOST=db
      - MYSQL_DATABASE=$DB_NAME
      - MYSQL_USER=$DB_USER
      - MYSQL_PASSWORD=$DB_PASSWORD
    ports:
      - 3000:3000
      - 9229:9229
    depends_on:
      platondb:
        condition: service_healthy
    volumes:
      - ./app:/usr/src/app/app

    # The commented out section below is an example of how to define a PostgreSQL
    # database that your application can use. `depends_on` tells Docker Compose to
    # start the database before your application. The `db-data` volume persists the
    # database data between container restarts. The `db-password` secret is used
    # to set the database password. You must create `db/password.txt` and add
    # a password of your choosing to it before running `docker-compose up`.
  platondb:
    image: mysql:8.0
    container_name: mysqlcontainer
    restart: unless-stopped
    env_file: ./.env
    # command: --default-authentication-plugin=mysql_native_password
    # command: --mysql-native-password=ON
    # command: ["mysqld", "--mysql-native-password=ON"]
    # command: ["mysqld", "--default-authentication-plugin=mysql_native_password"]
    environment:
      - MYSQL_DATABASE=$DB_NAME
      - MYSQL_ROOT_PASSWORD=$DB_PASSWORD
    ports:
      - "13306:3306"
    volumes:
      - db_data:/var/lib/mysql
      - ./mysql-config:/etc/mysql
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "127.0.0.1", "--silent"]
      interval: 5s
      timeout: 3s
      retries: 2
      start_period: 0s
volumes:
  db_data:
