datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// !!!
// Note that this schema is defined in snake_case instead of the prisma default PascalCase
// !!!

//after student signs up via firebase link sent to their email, did_register is set to true
model users {
  id            Int             @id @default(autoincrement())
  email         String          @unique @db.VarChar(150)
  first_name    String          @db.VarChar(100)
  last_name     String          @db.VarChar(100)
  created_at    DateTime        @default(now())
  did_register  Boolean         @default(false)
  role          roles           @default(STUDENT)
  users_periods users_periods[]
}

enum roles {
  STUDENT
  ADMIN
}

model courses {
  id          Int                  @id @default(autoincrement())
  name        String               @db.VarChar(150)
  description String               @db.VarChar(500)
  legacy      Boolean              @default(false)
  curriculums course_curriculums[]
}

//each course can have many curriculums (but each course can have only one curriculum that's not legacy)
model course_curriculums {
  id         Int                  @id @default(autoincrement())
  created_at DateTime             @default(now())
  legacy     Boolean              @default(false)
  course     courses              @relation(fields: [course_id], references: [id])
  course_id  Int
  weeks      curriculum_weeks[]
  periods    curriculum_periods[]
}

//description of weeks for each curriculum
//
//each curriculum can have many weeks
model curriculum_weeks {
  id            Int                @id @default(autoincrement())
  week_no       Int
  description   String             @db.VarChar(500)
  curriculum    course_curriculums @relation(fields: [curriculum_id], references: [id])
  curriculum_id Int
}

//periods are linked to curriculums instead of courses,
//because courses stay the same, but different periods may have a new curriculum
//
//each curriculum can have many periods
model curriculum_periods {
  id            Int                @id @default(autoincrement())
  begins_at     DateTime
  ends_at       DateTime
  curriculum    course_curriculums @relation(fields: [curriculum_id], references: [id])
  curriculum_id Int
  users_periods users_periods[]
  period_weeks  period_weeks[]
}

//this is seperate from 'curriculum_weeks' because:
//curriculum weeks are created for each week's curriculum description, they are explanatory
//period weeks are created for uploading documents, they are functional
//both of them don't have to be in sync with each other.
//
//each period can have many weeks
model period_weeks {
  id        Int                @id @default(autoincrement())
  week_no   Int
  period    curriculum_periods @relation(fields: [period_id], references: [id])
  period_id Int
  documents week_documents[]
}

//each week can have many documents
model week_documents {
  id        Int          @id @default(autoincrement())
  file_name String       @db.VarChar(300)
  week      period_weeks @relation(fields: [week_id], references: [id])
  week_id   Int
}

//many to many table between users and periods
//one user can sign up to many periods, one period can have many users
model users_periods {
  user      users              @relation(fields: [user_id], references: [id])
  period    curriculum_periods @relation(fields: [period_id], references: [id])
  user_id   Int
  period_id Int

  @@id([user_id, period_id])
}
